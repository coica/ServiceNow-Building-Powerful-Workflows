<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="ecc_agent_script_include">
    <ecc_agent_script_include action="INSERT_OR_UPDATE">
        <active>true</active>
        <description>Usage:&#13;
Script needs to be set in a JavaScriptProbe ECC Queue entry:&#13;
var remoteFileImport = new CSRemoteFileImport();&#13;
remoteFileImport.getRemoteFileAndUploadToInstance();</description>
        <name>AC_CSMIDServerRemoteFileImport</name>
        <script><![CDATA[var CSMIDServerRemoteFileImport = Class.create();
CSMIDServerRemoteFileImport.prototype = {
   initialize: function() {
/*
      // Originally created by Marcus Fly (marcus.fly@cloudsherpas.com) and Valor Poland (valor.poland@cloudsherpas.com)
      // Refactored by Martin Wood (martin.wood@servicenow.com).
*/
/*

      // Fixed by Alain Coic (alain.coicd@servicenow.com) 02/05/2020
	  // initial missing "Packages" in java call : L 67 + 113 => "Packages.java." 
	  // Works when installed in global : Remote File Import Test_import_csv.csv GLOBAL
	  // MID : ACMIDDEV1
	  // IMPORT TABLE : u_test_import_csv_csv_global
	  // File Path : /servicenow/test_import_csv.csv
	  // WORKS fine 
*/	   	   
      //this.debug = probe.getParameter("debug");
      this.debug = true;
      this.logMsg("Starting MID Server File Transfer");
      this.charset = "UTF-8";
      this.LINE_FEED = "\r\n";
      
      
      this.boundary = "===" + new Date().getTime() + "===";
      this.probeParameters = this._getProbeParameters();
   },
   
   getRemoteFileAndUploadToInstance: function() {
      var url = this._getInstanceConnectionURL();
      var conn = this._getURLConnection(url);
      var file = this._getFile();
      var response = this._writeFile(conn, file);
      if (response != 200)
         throw "HTTP response " + response;
      this.logMsg("HTTP response " + response, "debug");
      
      ms.log("Completed MID Server File Transfer");
      return response;
   },
   
   _getProbeParameters: function() {
      var probeObj = {};
      probeObj.instance = probe.getParameter("instance");
      probeObj.instanceUser = ms.getConfigParameter("mid.instance.username");
      probeObj.instancePassword = ms.getConfigParameter("mid.instance.password");
      
      probeObj.filePath = probe.getParameter("filePath");
      probeObj.targetImportSet = probe.getParameter("targetImportSet");
      return probeObj;
   },
   
   _getInstanceConnectionURL: function() {
      return this._joinParams(this.probeParameters.instance + "sys_import.do", [
      this._encodeParam('sysparm_import_set_tablename', this.probeParameters.targetImportSet),
      this._encodeParam('sysparm_transform_after_load', 'true')
      ]);
   },
   
   _encodeParam: function (k, v) {
      return k + "=" + Packages.java.net.URLEncoder.encode(v);
   },
   
   _joinParams: function (base, arr) {
      return base + '?' + arr.join('&');
   },
   _getURLConnection: function(url) {
      if (ms.getConfigParameter("mid.proxy.use_proxy") == 'true') {
         Packages.java.lang.System.setProperty("https.proxyHost", ms.getConfigParameter("mid.proxy.host"));
         Packages.java.lang.System.setProperty("http.proxyHost", ms.getConfigParameter("mid.proxy.host"));
         Packages.java.lang.System.setProperty("https.proxyPort", ms.getConfigParameter("mid.proxy.port"));
         Packages.java.lang.System.setProperty("http.proxyPort", ms.getConfigParameter("mid.proxy.port"));
      }
      var conn = new Packages.java.net.URL(url).openConnection();
      this.logMsg("Sending to : " + url, "debug");
      
      var userpass = new Packages.java.lang.String(this.probeParameters.instanceUser + ":" + this.probeParameters.instancePassword);
      var basicAuth = "Basic " + (new Packages.javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes()) + '');
      conn.setRequestProperty("Authorization", basicAuth);
      conn.setDoOutput(true);
      conn.setRequestMethod("POST");
      conn.setUseCaches(false);
      
      conn.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + this.boundary);
      conn.setRequestProperty("User-Agent", "MID Server POST");
      
      return conn;
      
   },
   
   _getFile: function() {
      return new Packages.java.io.File(this.probeParameters.filePath);
   },
   
   _writeFile: function(conn, uploadFile) {
      
      var outputStream = conn.getOutputStream();
      var writer = new Packages.java.io.PrintWriter(new Packages.java.io.OutputStreamWriter(outputStream, this.charset), true);
      var fieldName = 'file';
      var fileName = uploadFile.getName();
      
      this.logMsg("Sending file : " + fileName, "debug");
      
      writer.append("--" + this.boundary).append(this.LINE_FEED);
      writer.append("Content-Disposition: form-data; name=\"" + fieldName + "\"; filename=\"" + fileName + "\"").append(this.LINE_FEED);
      writer.append("Content-Type: " + Packages.java.net.URLConnection.guessContentTypeFromName(fileName)).append(this.LINE_FEED);
      writer.append("Content-Transfer-Encoding: binary").append(this.LINE_FEED);
      writer.append(this.LINE_FEED).flush();
      
      this._writeFileData(uploadFile, outputStream);
      
      writer.append(this.LINE_FEED).flush();
      writer.append(this.LINE_FEED).flush();
      writer.append("--" + this.boundary + "--").append(this.LINE_FEED);
      writer.close();
      return conn.getResponseCode();
   },
   
   
   _writeFileData: function(uploadFile, outputStream) {
      var inputStream = new Packages.java.io.FileInputStream(uploadFile);
      
      var data = new Packages.java.lang.reflect.Array.newInstance(Packages.java.lang.Byte.TYPE, 4096);
      var bytesRead = 0;
      while ((bytesRead = inputStream.read(data)) != -1) {
         outputStream.write(data, 0, bytesRead);
         outputStream.flush();
      }
      inputStream.close();
   },
   
   
   logMsg: function(message, logType) {
      logType = logType || 'info';
      var prefixStr = "*** MID Server Remote File";
      if (logType == 'info' || logType == 'error') {
         ms.log(prefixStr + " " + logType.toUpperCase() + "*** " + message);
      }
      if (this.debug && logType == 'debug') {
         ms.log(" DEBUG *** " + message);
      }
   },
   
   type: 'CSMIDServerRemoteFileImport'
};]]></script>
        <sys_class_name>ecc_agent_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-29 21:21:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6e5cf064db601c900d7cfe1b6896194d</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>AC_CSMIDServerRemoteFileImport</sys_name>
        <sys_overrides/>
        <sys_package display_value="My Hotel" source="x_hotel">a8f395beebc522004fcde08a5206fe2e</sys_package>
        <sys_policy/>
        <sys_scope display_value="My Hotel">a8f395beebc522004fcde08a5206fe2e</sys_scope>
        <sys_update_name>ecc_agent_script_include_6e5cf064db601c900d7cfe1b6896194d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-02 13:27:32</sys_updated_on>
    </ecc_agent_script_include>
</record_update>
